Simulation Parameters
	Network Topology
		Ring - Every peer connected to two (or one) other peer(s) in a ring
		Overay/Mesh - Peers are given random neighbours, and can form connections outwith their neighbours
		Grid - Every peer connected to exactly four other peers
		Fully Connected - Peers are connected to ALL other peers
		Tree - Every peer connected to up to three other peers in a binary tree structure

	Policies - need to be pseudo-RNG generated, but as a parameter of the sim, so multiple runs can be done with peers with the same policies
		Future work: Connect machine learning/genetic algorithms to optimise policies over multiple iterations

Peer Parameters
	Compliance/Violation
		Benevolent - Will always comply with policies if possible, even at a loss of value
		Pragmatic - Will use profit estimates to determine the most valuable course, preferring to comply if possible
		Adversarial - Will always violate policies, so long as this doesn't interfere with it's goals

		100:0:0 (All benevolent)
		0:100:0 (All pragmatic)
		0:0:100 (All adversarial)
		30:40:30 (Balanced)
		10:80:10 (Normal society)

	Fairness
		Fair - Peer will promote social welfare, forward messages, etc.
		Selfish - Peer will not promote social welfare, forward messages, etc.

		90:10 (Normal society)
		50:50 (Balanced)
		10:90 (Selfish society)
		100:0 (All fair)
		0:100 (All selfish)

	Information Owned/Needed
		For each data type {ID, Percentage Peers who Own, Percentage Peers who Need, Min Value, Max Value}
			Do we need to be able to control where certain peers are in the topology?

		One type of data, most need, few own
		Many types of data, half need, half own
		Two types of data, half need, half own

	Rewards/Penalties of their policies
		The range of potential reward/penalty values available to policies		

	Whether peers can leave the network (when satisfied adequately)
		True/False

Metrics
	Cycles/Rewards/Penalties
		Number of cycles present (only varies if peers can leave), reward cycles received, penalty cycles received
	Messages Sent
		Number of message sent by the peer
	Satisfaction
		Number of goals met by the peer (a.k.a., the number of times they've received data that they want)
	Hops per Message
		Number of hops each message takes (i.e., how far the message has to go, thus how successful message forwarding is)
	Social Welfare
		
	Data Profit/Points
		The utility acquired from data they've received

	All metrics are recorded:
		Per run as an average value accross all cycles
		Per cycle as an average value for that cycle, and values are split into the 6 roles
	Results are associated witht he parameters of the run for easier lookup

Notes
	Unwritten decision hooks should just point to a method (with appropriate signature) that flips a coin
	What is the minimum reward/penalty to meet some social welfare quota

Peer Values (a.k.a. global values from the peer spec)
	Identifier
	Knowledge base
	Policies
	Goals
	Transaction records
	Messages
	Min utility
	Current cycle (global)

Peer Overview
	Bootstrap
	while online
		Check for policy violations
		Process incoming messages
		Update policies
		Determine potential actions
		Carry out an obliged action/data request
		Determine whether to leave the network (if allowed)
	end